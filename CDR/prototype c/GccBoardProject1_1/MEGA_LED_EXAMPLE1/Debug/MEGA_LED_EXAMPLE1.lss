
MEGA_LED_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002dc  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cce  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e6  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cd4  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  000026d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000116f6  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000045d  00000000  00000000  00013ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0001431f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004025  00000000  00000000  00014377  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	ee d0       	rcall	.+476    	; 0x268 <main>
  8c:	25 c1       	rjmp	.+586    	; 0x2d8 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
  90:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
  92:	84 b1       	in	r24, 0x04	; 4
  94:	80 62       	ori	r24, 0x20	; 32
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
  9a:	89 2f       	mov	r24, r25
  9c:	80 6a       	ori	r24, 0xA0	; 160
  9e:	85 b9       	out	0x05, r24	; 5
  a0:	08 95       	ret

000000a2 <USART_Init>:
	uint8_t high = test >> 8;
	uint8_t low = test & 0xFF;
	
	USART_Transmit(high);
	USART_Transmit(low);
}
  a2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  aa:	8e e0       	ldi	r24, 0x0E	; 14
  ac:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b0:	08 95       	ret

000000b2 <USART_Transmit>:
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	95 ff       	sbrs	r25, 5
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <USART_Transmit+0x4>
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c0:	08 95       	ret

000000c2 <USART_send_str>:
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ec 01       	movw	r28, r24
  c8:	88 81       	ld	r24, Y
  ca:	88 23       	and	r24, r24
  cc:	29 f0       	breq	.+10     	; 0xd8 <USART_send_str+0x16>
  ce:	21 96       	adiw	r28, 0x01	; 1
  d0:	f0 df       	rcall	.-32     	; 0xb2 <USART_Transmit>
  d2:	89 91       	ld	r24, Y+
  d4:	81 11       	cpse	r24, r1
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <USART_send_str+0xe>
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <read_adc_channel>:
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29
  e2:	00 d0       	rcall	.+0      	; 0xe4 <read_adc_channel+0x6>
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	1a 82       	std	Y+2, r1	; 0x02
  ea:	19 82       	std	Y+1, r1	; 0x01
  ec:	aa e7       	ldi	r26, 0x7A	; 122
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	9c 91       	ld	r25, X
  f2:	97 60       	ori	r25, 0x07	; 7
  f4:	9c 93       	st	X, r25
  f6:	ec e7       	ldi	r30, 0x7C	; 124
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	90 81       	ld	r25, Z
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	90 83       	st	Z, r25
 100:	90 81       	ld	r25, Z
 102:	90 64       	ori	r25, 0x40	; 64
 104:	90 83       	st	Z, r25
 106:	90 81       	ld	r25, Z
 108:	89 2b       	or	r24, r25
 10a:	80 83       	st	Z, r24
 10c:	8c 91       	ld	r24, X
 10e:	80 6c       	ori	r24, 0xC0	; 192
 110:	8c 93       	st	X, r24
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	84 ff       	sbrs	r24, 4
 11a:	fd cf       	rjmp	.-6      	; 0x116 <read_adc_channel+0x38>
 11c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 120:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 124:	9a 83       	std	Y+2, r25	; 0x02
 126:	89 83       	std	Y+1, r24	; 0x01
 128:	ea e7       	ldi	r30, 0x7A	; 122
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	80 83       	st	Z, r24
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	9a 81       	ldd	r25, Y+2	; 0x02
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <transmit_adc_value>:
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	eb 01       	movw	r28, r22
 14e:	c7 df       	rcall	.-114    	; 0xde <read_adc_channel>
 150:	fc 01       	movw	r30, r24
 152:	9c 01       	movw	r18, r24
 154:	ad ec       	ldi	r26, 0xCD	; 205
 156:	bc ec       	ldi	r27, 0xCC	; 204
 158:	b0 d0       	rcall	.+352    	; 0x2ba <__umulhisi3>
 15a:	ac 01       	movw	r20, r24
 15c:	56 95       	lsr	r21
 15e:	47 95       	ror	r20
 160:	56 95       	lsr	r21
 162:	47 95       	ror	r20
 164:	56 95       	lsr	r21
 166:	47 95       	ror	r20
 168:	9a 01       	movw	r18, r20
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	ca 01       	movw	r24, r20
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	82 0f       	add	r24, r18
 17e:	93 1f       	adc	r25, r19
 180:	8f 01       	movw	r16, r30
 182:	08 1b       	sub	r16, r24
 184:	19 0b       	sbc	r17, r25
 186:	9a 01       	movw	r18, r20
 188:	98 d0       	rcall	.+304    	; 0x2ba <__umulhisi3>
 18a:	96 95       	lsr	r25
 18c:	87 95       	ror	r24
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	96 95       	lsr	r25
 194:	87 95       	ror	r24
 196:	9c 01       	movw	r18, r24
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	82 0f       	add	r24, r18
 1aa:	93 1f       	adc	r25, r19
 1ac:	48 1b       	sub	r20, r24
 1ae:	59 0b       	sbc	r21, r25
 1b0:	9f 01       	movw	r18, r30
 1b2:	36 95       	lsr	r19
 1b4:	27 95       	ror	r18
 1b6:	36 95       	lsr	r19
 1b8:	27 95       	ror	r18
 1ba:	ab e7       	ldi	r26, 0x7B	; 123
 1bc:	b4 e1       	ldi	r27, 0x14	; 20
 1be:	7d d0       	rcall	.+250    	; 0x2ba <__umulhisi3>
 1c0:	7c 01       	movw	r14, r24
 1c2:	f6 94       	lsr	r15
 1c4:	e7 94       	ror	r14
 1c6:	97 01       	movw	r18, r14
 1c8:	ad ec       	ldi	r26, 0xCD	; 205
 1ca:	bc ec       	ldi	r27, 0xCC	; 204
 1cc:	76 d0       	rcall	.+236    	; 0x2ba <__umulhisi3>
 1ce:	96 95       	lsr	r25
 1d0:	87 95       	ror	r24
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	96 95       	lsr	r25
 1d8:	87 95       	ror	r24
 1da:	9c 01       	movw	r18, r24
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	82 0f       	add	r24, r18
 1ee:	93 1f       	adc	r25, r19
 1f0:	e8 1a       	sub	r14, r24
 1f2:	f9 0a       	sbc	r15, r25
 1f4:	9f 01       	movw	r18, r30
 1f6:	36 95       	lsr	r19
 1f8:	27 95       	ror	r18
 1fa:	36 95       	lsr	r19
 1fc:	27 95       	ror	r18
 1fe:	36 95       	lsr	r19
 200:	27 95       	ror	r18
 202:	a5 ec       	ldi	r26, 0xC5	; 197
 204:	b0 e2       	ldi	r27, 0x20	; 32
 206:	59 d0       	rcall	.+178    	; 0x2ba <__umulhisi3>
 208:	92 95       	swap	r25
 20a:	82 95       	swap	r24
 20c:	8f 70       	andi	r24, 0x0F	; 15
 20e:	89 27       	eor	r24, r25
 210:	9f 70       	andi	r25, 0x0F	; 15
 212:	89 27       	eor	r24, r25
 214:	00 5d       	subi	r16, 0xD0	; 208
 216:	40 5d       	subi	r20, 0xD0	; 208
 218:	20 e3       	ldi	r18, 0x30	; 48
 21a:	2e 0d       	add	r18, r14
 21c:	80 5d       	subi	r24, 0xD0	; 208
 21e:	20 97       	sbiw	r28, 0x00	; 0
 220:	39 f4       	brne	.+14     	; 0x230 <transmit_adc_value+0xf0>
 222:	e0 e0       	ldi	r30, 0x00	; 0
 224:	f1 e0       	ldi	r31, 0x01	; 1
 226:	80 83       	st	Z, r24
 228:	21 83       	std	Z+1, r18	; 0x01
 22a:	42 83       	std	Z+2, r20	; 0x02
 22c:	03 83       	std	Z+3, r16	; 0x03
 22e:	12 c0       	rjmp	.+36     	; 0x254 <transmit_adc_value+0x114>
 230:	c1 30       	cpi	r28, 0x01	; 1
 232:	d1 05       	cpc	r29, r1
 234:	39 f4       	brne	.+14     	; 0x244 <transmit_adc_value+0x104>
 236:	e0 e0       	ldi	r30, 0x00	; 0
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	85 83       	std	Z+5, r24	; 0x05
 23c:	26 83       	std	Z+6, r18	; 0x06
 23e:	47 83       	std	Z+7, r20	; 0x07
 240:	00 87       	std	Z+8, r16	; 0x08
 242:	08 c0       	rjmp	.+16     	; 0x254 <transmit_adc_value+0x114>
 244:	22 97       	sbiw	r28, 0x02	; 2
 246:	31 f4       	brne	.+12     	; 0x254 <transmit_adc_value+0x114>
 248:	e0 e0       	ldi	r30, 0x00	; 0
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	82 87       	std	Z+10, r24	; 0x0a
 24e:	23 87       	std	Z+11, r18	; 0x0b
 250:	44 87       	std	Z+12, r20	; 0x0c
 252:	05 87       	std	Z+13, r16	; 0x0d
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	34 df       	rcall	.-408    	; 0xc2 <USART_send_str>
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	ff 90       	pop	r15
 264:	ef 90       	pop	r14
 266:	08 95       	ret

00000268 <main>:


int main (void)
{
	/* set board io port */
	board_init();
 268:	13 df       	rcall	.-474    	; 0x90 <board_init>
	USART_Init(MYUBRR);
 26a:	87 e6       	ldi	r24, 0x67	; 103
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	19 df       	rcall	.-462    	; 0xa2 <USART_Init>
	
	//DDRC |= (1 << DDC0);	// PC0 output
	
	DDRD |= (1 << DDD4);	// PD4 output LED
 270:	54 9a       	sbi	0x0a, 4	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	2f e9       	ldi	r18, 0x9F	; 159
 274:	86 e8       	ldi	r24, 0x86	; 134
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x10>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x1a>
 282:	00 00       	nop

	while(1)
	{
		_delay_ms(500);
		//PORTC &= ~(1 << PC0);	// PC0 low
		PORTD &= ~(1 << PD4);
 284:	5c 98       	cbi	0x0b, 4	; 11
 286:	2f e9       	ldi	r18, 0x9F	; 159
 288:	86 e8       	ldi	r24, 0x86	; 134
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <main+0x24>
 294:	00 c0       	rjmp	.+0      	; 0x296 <main+0x2e>
 296:	00 00       	nop
	
		_delay_ms(500);
		//PORTC |= (1 << PC0);	// PC0 high
		PORTD |= (1 << PD4);
 298:	5c 9a       	sbi	0x0b, 4	; 11
		ADC_out[10] = temp[0];
		ADC_out[11] = temp[1];
		ADC_out[12] = temp[2];
		ADC_out[13] = temp[3];
		*/
		transmit_adc_value(ADC_CHANNEL_0, 0);
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	4e df       	rcall	.-356    	; 0x140 <transmit_adc_value>
		transmit_adc_value(ADC_CHANNEL_1, 1);
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	49 df       	rcall	.-366    	; 0x140 <transmit_adc_value>
		transmit_adc_value(ADC_CHANNEL_2, 2);
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	44 df       	rcall	.-376    	; 0x140 <transmit_adc_value>
 2b8:	dc cf       	rjmp	.-72     	; 0x272 <main+0xa>

000002ba <__umulhisi3>:
 2ba:	a2 9f       	mul	r26, r18
 2bc:	b0 01       	movw	r22, r0
 2be:	b3 9f       	mul	r27, r19
 2c0:	c0 01       	movw	r24, r0
 2c2:	a3 9f       	mul	r26, r19
 2c4:	70 0d       	add	r23, r0
 2c6:	81 1d       	adc	r24, r1
 2c8:	11 24       	eor	r1, r1
 2ca:	91 1d       	adc	r25, r1
 2cc:	b2 9f       	mul	r27, r18
 2ce:	70 0d       	add	r23, r0
 2d0:	81 1d       	adc	r24, r1
 2d2:	11 24       	eor	r1, r1
 2d4:	91 1d       	adc	r25, r1
 2d6:	08 95       	ret

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
